apply plugin: 'com.android.application'
apply plugin: 'be.ugent.zeus.hydra.licenses'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'

// Read our properties, see bottom for details.
def props = loadProperties()

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    // Use resources in robolectric
    testOptions.unitTests.includeAndroidResources = true

    //noinspection GroovyMissingReturnStatement
    defaultConfig {
        applicationId "be.ugent.zeus.hydra"
        minSdkVersion 16
        targetSdkVersion 29
        versionCode 21402
        versionName "2.14.2"
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // For a description of what these do, see the config.properties file.
        buildConfigField "boolean", "DEBUG_HOME_STREAM_PRIORITY", props.getProperty('hydra.debug.home.stream.priority')
        buildConfigField "boolean", "DEBUG_HOME_STREAM_STALL", props.getProperty('hydra.debug.home.stream.stall')
        buildConfigField "boolean", "DEBUG_HOME_STREAM_ADD_SKO_CARD", props.getProperty('hydra.debug.home.stream.sko')
        buildConfigField "boolean", "DEBUG_ENABLE_STRICT_MODE", props.getProperty('hydra.debug.strict_mode')
        buildConfigField "boolean", "DEBUG_ENABLE_ALL_SPECIALS", props.getProperty('hydra.debug.home.stream.specials')
        buildConfigField "boolean", "DEBUG_TRACK_LEAKS", props.getProperty("hydra.debug.leaks")
        buildConfigField "boolean", "DEBUG_ENABLE_REPORTING", props.getProperty("hydra.debug.reporting")

        // used by Room, to test migrations
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }

    viewBinding {
        enabled = true
    }

    lintOptions {
        warningsAsErrors true
        // We don't support Right to Left layouts.
        disable "RtlSymmetry", "RtlHardcoded",
                // We don't care about long vector paths.
                "VectorPath",
                // Http is still allowed for now.
                "InsecureBaseConfiguration",
                // Allow overdraw, mainly used for selectable backgrounds
                "Overdraw",
                // Disabled until AS 4.0 is available
                "UnusedResources",
                // We use dependabot for dependencies
                "GradleDependency",
                // We will choose for ourselves when we update
                "OldTargetApi"
    }

    flavorDimensions "distribution"

    productFlavors {

        // Play Store and officially supported version
        store {
            isDefault = true
            manifestPlaceholders = [
                    google_maps_key: props.getProperty('MAPS_API_KEY'),
            ]
        }

        open {
            ext.enableCrashlytics = false
            versionNameSuffix "-open"
            applicationIdSuffix ".open"
            firebaseCrashlytics {
                mappingFileUploadEnabled false
            }
        }
    }

    // used by Room, to test migrations
    sourceSets {
        test.resources.srcDirs += files("$projectDir/schemas".toString())
    }

    //noinspection GroovyMissingReturnStatement
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            multiDexEnabled true
            // Disable crashlytics in debug builds if necessary.
            ext.enableCrashlytics = Boolean.parseBoolean(props.getProperty("hydra.debug.reporting"))
        }
    }

    //noinspection GroovyMissingReturnStatement
    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
        unitTests.all {
            systemProperty 'robolectric.logging.enabled', 'true'
        }
    }

    //noinspection GroovyMissingReturnStatement
    packagingOptions {
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/notice.txt'
    }
}

dependencies {
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'androidx.core:core:1.3.1'
    implementation 'androidx.media:media:1.1.0'
    implementation 'androidx.fragment:fragment:1.2.5'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.preference:preference:1.1.1'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    implementation 'com.google.android.material:material:1.2.0'
    implementation 'androidx.browser:browser:1.2.0'
    implementation 'androidx.slice:slice-builders:1.0.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation "androidx.lifecycle:lifecycle-common-java8:2.2.0"
    implementation 'androidx.room:room-runtime:2.2.5'
    annotationProcessor 'androidx.room:room-compiler:2.2.5'
    // Do not upgrade beyond 3.12.x until we require API 21+
    //noinspection GradleDependency
    implementation 'com.squareup.okhttp3:okhttp:3.12.12'
    implementation 'com.squareup.moshi:moshi:1.10.0'
    implementation 'com.jakewharton.threetenabp:threetenabp:1.2.4'
    implementation 'net.sourceforge.streamsupport:android-retrostreams:1.7.2'
    implementation 'com.squareup.picasso:picasso:2.8'
    implementation 'net.cachapa.expandablelayout:expandablelayout:2.9.2'
    implementation 'com.github.niknetniko:material-intro:9903deb6c4'
    implementation 'com.jonathanfinerty.once:once:1.3.0'
    implementation 'blue.aodev:material-values:1.1.1'

    // Dependencies for the Play Store version.
    storeImplementation 'com.google.android.gms:play-services-maps:17.0.0'
    storeImplementation 'com.google.firebase:firebase-analytics:17.5.0'
    storeImplementation 'com.google.firebase:firebase-crashlytics:17.2.1'

    // Dependencies for open version.
    openImplementation 'org.osmdroid:osmdroid-android:6.1.8'

    if (props.getProperty("hydra.debug.leaks").toBoolean()) {
        logger.info("Leak tracking enabled...")
        debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.4'
    }

    testImplementation 'junit:junit:4.13'
    testImplementation 'org.mockito:mockito-core:3.5.7'
    testImplementation 'org.robolectric:robolectric:4.4'
    testImplementation 'androidx.test:core:1.3.0'
    testImplementation 'androidx.test.ext:junit:1.1.2'
    testImplementation 'androidx.test:rules:1.3.0'
    testImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    testImplementation 'androidx.test.espresso:espresso-intents:3.3.0'
    testImplementation 'androidx.test.espresso:espresso-contrib:3.3.0'
    testImplementation 'androidx.arch.core:core-testing:2.1.0'
    testImplementation 'androidx.room:room-testing:2.2.5'
    // Enable the normal library for unit tests.
    testImplementation('org.threeten:threetenbp:1.4.4') {
        exclude group: 'com.jakewharton.threetenabp', module: 'threetenabp'
    }
    //noinspection GradleDependency
    testImplementation 'com.squareup.okhttp3:mockwebserver:3.12.12'
    testImplementation 'nl.jqno.equalsverifier:equalsverifier:3.4.2'
    testImplementation 'com.github.niknetniko:GetterSetterVerifier:0.0.11'
    testImplementation 'com.shazam:shazamcrest:0.11'
    testImplementation 'org.skyscreamer:jsonassert:1.5.0'
    testImplementation 'org.jeasy:easy-random-core:4.2.0'
    testImplementation 'org.apache.commons:commons-lang3:3.11'
    testImplementation 'commons-validator:commons-validator:1.6'
}


// Disable Google services for open variant.
android.applicationVariants.all { variant ->
    def googleTask = tasks.findByName("process${variant.name.capitalize()}GoogleServices")
    googleTask.enabled = "open" != variant.flavorName
}

/**
 * Loads the default properties, and the user properties. This will also load the
 * secret keys.
 */
def loadProperties() {

    // Load the default properties.
    def defaultProps = new Properties()
    defaultProps.load(file("config.properties").newReader())

    // Load custom properties if available
    def customProps = new Properties(defaultProps)
    def customFile = file("custom-config.properties")
    if (customFile.exists()) {
        customProps.load(customFile.newReader())
    } else {
        logger.info('No custom-config.properties file was found.')
    }

    // Load the secret example secret keys.
    def exampleKeys = new Properties(customProps)
    exampleKeys.load(file('secrets.properties.example').newReader())

    // Load the actual keys if present
    def actualKeys = new Properties(exampleKeys)
    def actualKeyFile = file('secrets.properties')
    if (actualKeyFile.exists()) {
        actualKeys.load(actualKeyFile.newReader())
    } else {
        logger.warn('A secrets.properties file was not found.')
    }

    return actualKeys
}

// Travis uses plain console mode, which does not output test status by default, causing time-outs.
tasks.withType(Test) {
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
}
