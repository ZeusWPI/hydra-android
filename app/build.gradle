apply plugin: 'com.android.application'
apply plugin: 'com.cookpad.android.licensetools'

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.2"

    defaultConfig {
        applicationId "be.ugent.zeus.hydra"
        minSdkVersion 16
        targetSdkVersion 26
        versionCode 262
        versionName "2.6.0"
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        def props = loadProperties()
        manifestPlaceholders = [
                google_maps_key: props.getProperty('MAPS_API_KEY'),
                disableAnalytics: false
        ]
        // Minerva authentication keys
        buildConfigField "String", "OAUTH_ID", '"' + props.getProperty('OAUTH_ID') + '"'
        buildConfigField "String", "OAUTH_SECRET", '"' + props.getProperty('OAUTH_SECRET') + '"'
        // For a description of what these do, see the config.properties file.
        buildConfigField "boolean", "DEBUG_HOME_STREAM_PRIORITY", props.getProperty('hydra.debug.home.stream.priority')
        buildConfigField "boolean", "DEBUG_HOME_STREAM_STALL", props.getProperty('hydra.debug.home.stream.stall')
        buildConfigField "boolean", "DEBUG_HOME_STREAM_ADD_SKO_CARD", props.getProperty('hydra.debug.home.stream.sko')
        buildConfigField "boolean", "DEBUG_ENABLE_STRICT_MODE", props.getProperty('hydra.debug.strict_mode')

        // used by Room, to test migrations
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }

    // used by Room, to test migrations
    sourceSets {
        androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            zipAlignEnabled true
        }
        debug {
            // Set this to false on release versions!
            debuggable true
            // Disable analytics in debug builds
            manifestPlaceholders = [disableAnalytics: true]
        }
    }

    testOptions {
        unitTests {
        //    includeAndroidResources = true
            returnDefaultValues = true
        }
        unitTests.all {
            systemProperty 'robolectric.logging.enabled', 'true'
        }
    }

    packagingOptions {
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/notice.txt'
    }

    // TODO: fork the material-intro library and remove databinding.
    dataBinding {
        enabled = true
    }
}

project.afterEvaluate {
    //preBuild.dependsOn checkLicenses, generateLicensePage
}

//The support library version
final SUPPORT_LIBRARY_VERSION = '26.1.0'
final GMS_VERSION = '11.6.2'
final AAC_VERSION = '1.0.0'

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile "com.android.support:support-v4:$SUPPORT_LIBRARY_VERSION"
    compile "com.android.support:support-v13:$SUPPORT_LIBRARY_VERSION"
    compile "com.android.support:appcompat-v7:$SUPPORT_LIBRARY_VERSION"
    compile "com.android.support:cardview-v7:$SUPPORT_LIBRARY_VERSION"
    compile "com.android.support:support-v13:$SUPPORT_LIBRARY_VERSION"
    compile "com.android.support:preference-v7:$SUPPORT_LIBRARY_VERSION"
    compile "com.android.support:recyclerview-v7:$SUPPORT_LIBRARY_VERSION"
    compile "com.android.support:design:$SUPPORT_LIBRARY_VERSION"
    compile "com.android.support:customtabs:$SUPPORT_LIBRARY_VERSION"

    // Android Architecture Components
    compile "android.arch.lifecycle:extensions:$AAC_VERSION"
    annotationProcessor "android.arch.lifecycle:compiler:$AAC_VERSION"
    testCompile "android.arch.core:core-testing:$AAC_VERSION"

    compile "android.arch.persistence.room:runtime:$AAC_VERSION"
    annotationProcessor "android.arch.persistence.room:compiler:$AAC_VERSION"
    androidTestCompile("android.arch.persistence.room:testing:$AAC_VERSION") {
        exclude group: 'com.google.code.gson', module: 'gson'
    }

    // Mappers
    compile 'org.mapstruct:mapstruct:1.2.0.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.2.0.Final'

    compile 'org.springframework.android:spring-android-core:1.0.1.RELEASE'
    compile 'org.springframework.android:spring-android-rest-template:1.0.1.RELEASE'
    compile 'com.google.code.gson:gson:2.8.2'
    compile 'com.timehop.stickyheadersrecyclerview:library:0.4.3@aar'
    compile 'com.jakewharton.threetenabp:threetenabp:1.0.5'
    compile 'net.sourceforge.streamsupport:streamsupport:1.5.6'
    compile 'com.github.streamsupport.streamsupport:streamsupport-pro:-SNAPSHOT'
    compile 'com.squareup.picasso:picasso:2.6.0-SNAPSHOT'
    compile 'net.cachapa.expandablelayout:expandablelayout:2.9.2'
    compile 'com.github.pluscubed:recycler-fast-scroll:0.3.2@aar'
    compile 'com.heinrichreimersoftware:material-intro:1.6.2'
    compile 'su.j2e:rv-joiner:1.0.9'
    compile 'com.github.alexfu:SQLiteQueryBuilder:0.3.0'
    compile 'com.jonathanfinerty.once:once:1.2.2'
    compile 'com.karumi:dexter:4.1.1'
    compile 'com.github.captain-miao:optroundcardview:1.0.0'

    // Used for the OAuth stuff
    compile ('org.apache.oltu.oauth2:org.apache.oltu.oauth2.client:1.0.2') {
        exclude group: 'org.apache.oltu.oauth2'
    }

    compile "com.google.android.gms:play-services-analytics:$GMS_VERSION"
    compile "com.google.android.gms:play-services-maps:$GMS_VERSION"

    compile "com.google.firebase:firebase-core:$GMS_VERSION"

    testCompile project(':firebasenoop')
    debugCompile project(':firebasenoop')
    releaseCompile "com.google.firebase:firebase-crash:$GMS_VERSION"

    compile "com.google.firebase:firebase-messaging:$GMS_VERSION"

    //Test code
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:2.7.20'

    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.5.4'
    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.4'
    testCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.4'

    //Enable the normal library for unit tests
    testCompile ('org.threeten:threetenbp:1.3.2'){
        exclude group:'com.jakewharton.threetenabp', module:'threetenabp'
    }

    testCompile 'nl.jqno.equalsverifier:equalsverifier:2.2.1'
    testCompile ('com.shazam:shazamcrest:0.11') {
        exclude group: 'com.google.code.gson', module: 'gson'
    }
    testCompile 'io.github.benas:random-beans:3.6.0'
    testCompile 'org.apache.commons:commons-lang3:3.5'
    testCompile 'org.hamcrest:hamcrest-core:1.3'
    testCompile 'com.googlecode:openbeans:1.0'
    testCompile 'org.robolectric:robolectric:3.5.1'
    testCompile('org.springframework:spring-test:3.2.18.RELEASE') {
        exclude module: 'spring-core'
    }
    testCompile 'commons-validator:commons-validator:1.6'

    // AndroidJUnitRunner and JUnit Rules
    androidTestCompile ('com.android.support.test:runner:1.0.0') {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestCompile ('com.android.support.test:rules:1.0.0') {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
}

apply plugin: 'com.google.gms.google-services'

/**
 * Loads the default properties, and the user properties. This will also load the
 * secret keys.
 *
 * @return
 */
def loadProperties() {

    // Load the default properties.
    def defaultProps = new Properties()
    defaultProps.load(file("config.properties").newReader())

    // Load custom properties if available
    def customProps = new Properties(defaultProps)
    def customFile = file("custom-config.properties")
    if (customFile.exists()) {
        customProps.load(customFile.newReader())
    } else {
        logger.info('No custom-config.properties file was found.')
    }

    // Load the secret example secret keys.
    def exampleKeys = new Properties(customProps)
    exampleKeys.load(file('secrets.properties.example').newReader())

    // Load the actual keys if present
    def actualKeys = new Properties(exampleKeys)
    def actualKeyFile = file('secrets.properties')
    if (actualKeyFile.exists()) {
        actualKeys.load(actualKeyFile.newReader())
    } else {
        logger.warn("A secrets.properties file was not found. Minerva and other API's will not work.")
    }

    return actualKeys
}