apply plugin: 'com.android.application'
apply plugin: 'com.jaredsburrows.license'
apply plugin: 'io.fabric'

android {
    compileSdkVersion 28

    // Use resources in robolectric
    testOptions.unitTests.includeAndroidResources = true

    defaultConfig {
        applicationId "be.ugent.zeus.hydra"
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 2902
        versionName "2.9.0"
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        def props = loadProperties()
        manifestPlaceholders = [
                google_maps_key     : props.getProperty('MAPS_API_KEY'),
        ]
        // Minerva authentication keys
        buildConfigField "String", "OAUTH_ID", '"' + props.getProperty('OAUTH_ID') + '"'
        buildConfigField "String", "OAUTH_SECRET", '"' + props.getProperty('OAUTH_SECRET') + '"'
        // For a description of what these do, see the config.properties file.
        buildConfigField "boolean", "DEBUG_HOME_STREAM_PRIORITY", props.getProperty('hydra.debug.home.stream.priority')
        buildConfigField "boolean", "DEBUG_HOME_STREAM_STALL", props.getProperty('hydra.debug.home.stream.stall')
        buildConfigField "boolean", "DEBUG_HOME_STREAM_ADD_SKO_CARD", props.getProperty('hydra.debug.home.stream.sko')
        buildConfigField "boolean", "DEBUG_ENABLE_STRICT_MODE", props.getProperty('hydra.debug.strict_mode')
        buildConfigField "boolean", "DEBUG_ENABLE_ALL_SPECIALS", props.getProperty('hydra.debug.home.stream.specials')
        buildConfigField "boolean", "DEBUG_NETWORK_ENABLE_LOGS", props.getProperty('hydra.debug.network.logging')

        // used by Room, to test migrations
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }

    // used by Room, to test migrations
    sourceSets {
        test.resources.srcDirs += files("$projectDir/schemas".toString())
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            multiDexEnabled true
            // Disable crashlytics in debug builds
            ext.enableCrashlytics = false
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
        unitTests.all {
            systemProperty 'robolectric.logging.enabled', 'true'
        }
    }

    packagingOptions {
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/notice.txt'
    }
}

licenseReport {
    generateJsonReport = false
}

// TODO: Run the library generate task automatically.
// Might become automatic in the future, see https://github.com/jaredsburrows/gradle-license-plugin/issues/38.

// The support library version
dependencies {

    implementation project(':provider-contract')

    implementation 'androidx.multidex:multidex:2.0.1'

    implementation 'androidx.core:core:1.0.1'
    implementation 'androidx.media:media:1.0.1'
    implementation 'androidx.fragment:fragment:1.0.0'

    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'androidx.browser:browser:1.0.0'
    implementation 'androidx.slice:slice-builders:1.0.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.0.0'
    annotationProcessor 'androidx.lifecycle:lifecycle-compiler:2.0.0'
    testImplementation 'androidx.arch.core:core-testing:2.0.0'

    implementation 'androidx.room:room-runtime:2.0.0'
    annotationProcessor 'androidx.room:room-compiler:2.0.0'
    testImplementation 'androidx.room:room-testing:2.0.0'

    // Mappers
    implementation 'org.mapstruct:mapstruct:1.2.0.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.2.0.Final'

    // Network stack
    // Do not upgrade beyond 3.12.x until we require API 21+
    //noinspection GradleDependency
    implementation 'com.squareup.okhttp3:okhttp:3.12.1'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.12.1'
    implementation 'com.squareup.moshi:moshi:1.8.0'

    implementation 'com.timehop.stickyheadersrecyclerview:library:0.4.3@aar'
    implementation 'com.jakewharton.threetenabp:threetenabp:1.1.1'
    implementation 'net.sourceforge.streamsupport:android-retrostreams:1.7.0'
    implementation 'com.squareup.picasso:picasso:2.71828'
    implementation 'net.cachapa.expandablelayout:expandablelayout:2.9.2'
    
    // Use our own fork, since it seems the original library is abandoned.
    //noinspection GradleDependency
    implementation 'com.github.niknetniko:material-intro:1622'
    implementation 'com.jonathanfinerty.once:once:1.2.2'
    implementation 'com.karumi:dexter:5.0.0'
    implementation 'com.github.captain-miao:optroundcardview:1.1.0'
    implementation 'blue.aodev:material-values:1.1.1'

    // Used for the OAuth stuff
    implementation('org.apache.oltu.oauth2:org.apache.oltu.oauth2.client:1.0.2') {
        exclude group: 'org.apache.oltu.oauth2'
    }

    implementation 'com.google.android.gms:play-services-maps:16.0.0'
    implementation 'com.google.android.gms:play-services-auth:16.0.1'

    implementation 'com.google.firebase:firebase-core:16.0.7'
    implementation 'com.google.firebase:firebase-messaging:17.3.4'

    implementation 'com.crashlytics.sdk.android:crashlytics:2.9.8'

    //Test code
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.23.4'

    testImplementation 'org.robolectric:robolectric:4.1'
    testImplementation 'androidx.test:core:1.1.0'

    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.6.2'
    // TODO: enabling this results in what I believe to be a lot of false positives
    // debugImplementation 'com.squareup.leakcanary:leakcanary-support-fragment:1.6.2'
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.6.2'
    testImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.6.2'

    //Enable the normal library for unit tests
    testImplementation('org.threeten:threetenbp:1.3.8') {
        exclude group: 'com.jakewharton.threetenabp', module: 'threetenabp'
    }

    testImplementation 'com.squareup.okhttp3:mockwebserver:3.12.0'
    testImplementation 'nl.jqno.equalsverifier:equalsverifier:3.0.3'
    testImplementation 'com.shazam:shazamcrest:0.11'
    testImplementation 'org.skyscreamer:jsonassert:1.5.0'
    testImplementation 'io.github.benas:random-beans:3.7.0'
    testImplementation 'org.apache.commons:commons-lang3:3.8.1'
    testImplementation 'org.hamcrest:hamcrest-core:1.3'
    testImplementation 'commons-validator:commons-validator:1.6'
}

apply plugin: 'com.google.gms.google-services'

/**
 * Loads the default properties, and the user properties. This will also load the
 * secret keys.
 */
def loadProperties() {

    // Load the default properties.
    def defaultProps = new Properties()
    defaultProps.load(file("config.properties").newReader())

    // Load custom properties if available
    def customProps = new Properties(defaultProps)
    def customFile = file("custom-config.properties")
    if (customFile.exists()) {
        customProps.load(customFile.newReader())
    } else {
        logger.info('No custom-config.properties file was found.')
    }

    // Load the secret example secret keys.
    def exampleKeys = new Properties(customProps)
    exampleKeys.load(file('secrets.properties.example').newReader())

    // Load the actual keys if present
    def actualKeys = new Properties(exampleKeys)
    def actualKeyFile = file('secrets.properties')
    if (actualKeyFile.exists()) {
        actualKeys.load(actualKeyFile.newReader())
    } else {
        logger.warn('A secrets.properties file was not found. Minerva and other APIs will not work.')
    }

    return actualKeys
}