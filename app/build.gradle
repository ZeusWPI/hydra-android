/*
 * Copyright (c) 2021 The Hydra authors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

apply plugin: 'com.android.application'
apply plugin: 'be.ugent.zeus.hydra.licenses'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'

// Read our properties, see bottom for details.
def props = loadProperties()
def versions = loadAndroidVersions()

android {
    // We need this for Nix flakes
    //noinspection GrDeprecatedAPIUsage
    buildToolsVersion versions.buildToolsVersions

    defaultConfig {
        compileSdk versions.platformVersions as Integer

        applicationId "be.ugent.zeus.hydra"
        minSdk 21
        targetSdk 34
        versionCode 37300
        versionName "3.7.3"
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        resourceConfigurations += ['nl', 'en']

        // For a description of what these do, see the config.properties file.
        buildConfigField "boolean", "DEBUG_HOME_STREAM_PRIORITY", props.getProperty('hydra.debug.home.stream.priority')
        buildConfigField "boolean", "DEBUG_HOME_STREAM_STALL", props.getProperty('hydra.debug.home.stream.stall')
        buildConfigField "boolean", "DEBUG_ENABLE_STRICT_MODE", props.getProperty('hydra.debug.strict_mode')
        buildConfigField "boolean", "DEBUG_ENABLE_ALL_SPECIALS", props.getProperty('hydra.debug.home.stream.specials')
        buildConfigField "boolean", "DEBUG_TRACK_LEAKS", props.getProperty("hydra.debug.leaks")
        buildConfigField "boolean", "DEBUG_ENABLE_REPORTING", props.getProperty("hydra.debug.reporting")

        // used by Room, to test migrations
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }


    if (props["signing"]) {
        signingConfigs {
            upload {
                keyAlias "upload"
                keyPassword props['keyPassword']
                storeFile file(props['storeFile'])
                storePassword props['storePassword']
                v1SigningEnabled true
                v2SigningEnabled true
            }
        }
    }

    flavorDimensions = ["distribution"]

    productFlavors {
        // Play Store and officially supported version
        store {
            isDefault = true
            manifestPlaceholders = [
                    google_maps_key: props.getProperty('mapsApiKey'),
            ]
        }

        open {
            ext.enableCrashlytics = false
            versionNameSuffix "-open"
            applicationIdSuffix ".open"
            firebaseCrashlytics {
                mappingFileUploadEnabled false
            }
        }
    }

    // used by Room, to test migrations
    sourceSets {
        test.resources.srcDirs += files("$projectDir/schemas".toString())
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            if (props["signing"]) {
                signingConfig signingConfigs.upload
            }
        }

        debug {
            // Disable crashlytics in debug builds if necessary.
            ext.enableCrashlytics = Boolean.parseBoolean(props.getProperty("hydra.debug.reporting"))
//            testCoverageEnabled true
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
        unitTests.all {
            systemProperty 'robolectric.logging.enabled', 'true'
        }
    }

    buildFeatures {
        viewBinding = true
        buildConfig = true
    }

    packagingOptions {
        resources {
            excludes += [
                    'META-INF/ASL2.0',
                    'META-INF/LICENSE',
                    'META-INF/DEPENDENCIES.txt',
                    'META-INF/DEPENDENCIES',
                    'META-INF/dependencies.txt',
                    'META-INF/LICENSE.txt',
                    'META-INF/LICENSE',
                    'META-INF/license.txt',
                    'META-INF/LGPL2.1',
                    'META-INF/NOTICE.txt',
                    'META-INF/NOTICE',
                    'META-INF/notice.txt'
            ]
        }
    }

    namespace 'be.ugent.zeus.hydra'

    lint {
        disable 'RtlSymmetry', 'VectorPath', 'Overdraw', 'GradleDependency', 'NotificationPermission', 'OldTargetApi'
        showAll true
        warningsAsErrors true
    }
}

dependencies {
    coreLibraryDesugaring libs.desugar

    implementation libs.androidx.core
    implementation libs.androidx.media
    implementation libs.androidx.fragment
    implementation libs.androidx.appcompat
    implementation libs.androidx.preference
    implementation libs.androidx.cardview
    implementation libs.androidx.recyclerview
    implementation libs.androidx.swiperefreshlayout
    implementation libs.androidx.constraintlayout
    implementation libs.material
    implementation libs.androidx.browser
    implementation libs.bundles.androidx.lifecycle
    implementation libs.androidx.viewpager2
    implementation libs.androidx.room.runtime
    annotationProcessor libs.androidx.room.compiler
    implementation libs.rxjava.rules
    implementation libs.okhttp3
    implementation libs.moshi
    implementation libs.picasso
    implementation libs.cachapa
    implementation project(":material-intro")
    implementation libs.once
    implementation libs.materialvalues
    implementation libs.insetter
    implementation libs.ipcam

    annotationProcessor libs.recordbuilder.processor
    compileOnly libs.recordbuilder.core

    // Dependencies for the Play Store version.
    storeImplementation libs.play.maps
    storeImplementation libs.firebase.analytics
    storeImplementation libs.firebase.crashlytics
    storeImplementation libs.play.codescanner

    // Dependencies for open version.
    openImplementation libs.osmdroid
    openImplementation libs.zxing

    if (props.getProperty("hydra.debug.leaks").toBoolean()) {
        logger.info("Leak tracking enabled...")
        debugImplementation libs.leakcanary
    }

    testImplementation libs.junit
    // Once final classes can be mocked, go back to mockito-core.
    testImplementation libs.mockito.inline
    testImplementation libs.robolectric
    testImplementation libs.androidx.test.core
    testImplementation libs.androidx.junit
    testImplementation libs.androidx.rules
    testImplementation libs.androidx.espresso.core
    testImplementation libs.androidx.espresso.intents
    testImplementation libs.androidx.espresso.contrib
    testImplementation libs.androidx.core.testing
    testImplementation libs.androidx.room.testing
    testImplementation libs.okhttp3.mockwebserver
    testImplementation libs.equalsverifier
    testImplementation libs.shazamcrest
    testImplementation libs.jsonassert
    testImplementation libs.easyrandom
    testImplementation libs.commons.lang3
    testImplementation libs.commons.validator
    testImplementation libs.guava
}


// Disable Google services for open variant.
android.applicationVariants.configureEach { variant ->
    tasks.named("process${variant.name.capitalize()}GoogleServices").configure {
        it.enabled = "open" != variant.flavorName
    }
}

/**
 * Loads the default properties, and the user properties. This will also load the
 * secret keys.
 */
def loadProperties() {
    // Load the default properties.
    def defaultProps = new Properties()
    defaultProps.load(file("config.properties").newReader())

    // Load custom properties if available
    def customProps = new Properties(defaultProps)
    def customFile = file("custom-config.properties")
    if (customFile.exists()) {
        customProps.load(customFile.newReader())
    } else {
        logger.info('No custom-config.properties file was found.')
    }

    // Load the secret example secret keys.
    def exampleKeys = new Properties(customProps)
    exampleKeys.load(file('secrets.properties.example').newReader())

    // Load the actual keys if present
    def actualKeys = new Properties(exampleKeys)
    def actualKeyFile = file('secrets.properties')
    if (actualKeyFile.exists()) {
        actualKeys.load(actualKeyFile.newReader())
    } else {
        logger.warn('A secrets.properties file was not found.')
    }

    return actualKeys
}

/**
 * Loads the default properties, and the user properties. This will also load the
 * secret keys.
 */
def loadAndroidVersions() {
    def defaultProps = new Properties()
    defaultProps.load(file("../android-versions.toml").newReader())
    
    def strippedProps = new Properties()
    for (e in defaultProps) {
        strippedProps.setProperty(e.key, e.value.replaceAll('"', ''))
    }
    
    return strippedProps
}
