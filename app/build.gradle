/*
 * Copyright (c) 2021 The Hydra authors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

apply plugin: 'com.android.application'
apply plugin: 'be.ugent.zeus.hydra.licenses'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'

// Read our properties, see bottom for details.
def props = loadProperties()

android {
    buildToolsVersion "33.0.0"

    defaultConfig {
        compileSdk 33

        applicationId "be.ugent.zeus.hydra"
        minSdk 21
        targetSdk 33
        versionCode 36000
        versionName "3.6.0"
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        resourceConfigurations += ['nl', 'en']

        // For a description of what these do, see the config.properties file.
        buildConfigField "boolean", "DEBUG_HOME_STREAM_PRIORITY", props.getProperty('hydra.debug.home.stream.priority')
        buildConfigField "boolean", "DEBUG_HOME_STREAM_STALL", props.getProperty('hydra.debug.home.stream.stall')
        buildConfigField "boolean", "DEBUG_ENABLE_STRICT_MODE", props.getProperty('hydra.debug.strict_mode')
        buildConfigField "boolean", "DEBUG_ENABLE_ALL_SPECIALS", props.getProperty('hydra.debug.home.stream.specials')
        buildConfigField "boolean", "DEBUG_TRACK_LEAKS", props.getProperty("hydra.debug.leaks")
        buildConfigField "boolean", "DEBUG_ENABLE_REPORTING", props.getProperty("hydra.debug.reporting")

        // used by Room, to test migrations
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }


    if (props["signing"]) {
        signingConfigs {
            upload {
                keyAlias "upload"
                keyPassword props['keyPassword']
                storeFile file(props['storeFile'])
                storePassword props['storePassword']
                v1SigningEnabled true
                v2SigningEnabled true
            }
        }
    }

    flavorDimensions "distribution"

    productFlavors {
        // Play Store and officially supported version
        store {
            isDefault = true
            manifestPlaceholders = [
                    google_maps_key: props.getProperty('mapsApiKey'),
            ]
        }

        open {
            ext.enableCrashlytics = false
            versionNameSuffix "-open"
            applicationIdSuffix ".open"
            firebaseCrashlytics {
                mappingFileUploadEnabled false
            }
        }
    }

    // used by Room, to test migrations
    sourceSets {
        test.resources.srcDirs += files("$projectDir/schemas".toString())
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            if (props["signing"]) {
                signingConfig signingConfigs.upload
            }
        }

        debug {
            // Disable crashlytics in debug builds if necessary.
            ext.enableCrashlytics = Boolean.parseBoolean(props.getProperty("hydra.debug.reporting"))
            testCoverageEnabled true
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
        unitTests.all {
            systemProperty 'robolectric.logging.enabled', 'true'
        }
    }

    buildFeatures {
        viewBinding = true
        buildConfig = true
    }

    packagingOptions {
        resources {
            excludes += [
                    'META-INF/ASL2.0',
                    'META-INF/LICENSE',
                    'META-INF/DEPENDENCIES.txt',
                    'META-INF/DEPENDENCIES',
                    'META-INF/dependencies.txt',
                    'META-INF/LICENSE.txt',
                    'META-INF/LICENSE',
                    'META-INF/license.txt',
                    'META-INF/LGPL2.1',
                    'META-INF/NOTICE.txt',
                    'META-INF/NOTICE',
                    'META-INF/notice.txt'
            ]
        }
    }

    namespace 'be.ugent.zeus.hydra'

    lint {
        disable 'RtlSymmetry', 'VectorPath', 'InsecureBaseConfiguration', 'Overdraw', 'GradleDependency', 'OldTargetApi', 'ObsoleteLintCustomCheck', 'NotificationPermission'
        showAll true
        warningsAsErrors true
    }
}

dependencies {
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.3'

    // Needed until all dependencies will be fixed
    constraints {
        implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.8.21") {
            because("kotlin-stdlib-jdk7 is now a part of kotlin-stdlib")
        }
        implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.8.21") {
            because("kotlin-stdlib-jdk8 is now a part of kotlin-stdlib")
        }
    }

    implementation 'androidx.core:core:1.10.0'
    implementation 'androidx.media:media:1.6.0'
    implementation 'androidx.fragment:fragment:1.5.7'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.preference:preference:1.2.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.3.0'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'com.google.android.material:material:1.8.0'
    implementation 'androidx.browser:browser:1.5.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel:2.6.1'
    implementation 'androidx.lifecycle:lifecycle-livedata:2.6.1'
    implementation 'androidx.lifecycle:lifecycle-livedata:2.6.1'
    implementation 'androidx.lifecycle:lifecycle-common-java8:2.6.1'
    implementation 'androidx.viewpager2:viewpager2:1.0.0'
    implementation 'androidx.room:room-runtime:2.5.1'
    annotationProcessor 'androidx.room:room-compiler:2.5.1'
    implementation 'com.artemzin.rxjava:proguard-rules:1.3.3.0'
    implementation 'com.squareup.okhttp3:okhttp:4.11.0'
    implementation 'com.squareup.moshi:moshi:1.14.0'
    implementation 'com.squareup.picasso:picasso:2.8'
    implementation 'com.github.cachapa:ExpandableLayout:2.9.2'
    implementation project(":material-intro")
    implementation 'com.github.jonfinerty:Once:19fa6fa10d'
    implementation 'com.github.esnaultdev:MaterialValues:v1.1.1'
    implementation 'dev.chrisbanes.insetter:insetter:0.6.1'
    implementation 'com.github.niqdev:ipcam-view:2.4.0'

    // Dependencies for the Play Store version.
    storeImplementation 'com.google.android.gms:play-services-maps:18.1.0'
    storeImplementation 'com.google.firebase:firebase-analytics:21.2.2'
    storeImplementation 'com.google.firebase:firebase-crashlytics:18.3.7'
    storeImplementation 'com.google.android.gms:play-services-code-scanner:16.0.0'

    // Dependencies for open version.
    openImplementation 'org.osmdroid:osmdroid-android:6.1.16'
    openImplementation 'com.journeyapps:zxing-android-embedded:4.3.0'

    if (props.getProperty("hydra.debug.leaks").toBoolean()) {
        logger.info("Leak tracking enabled...")
        debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.11'
    }

    testImplementation 'junit:junit:4.13.2'
    // Once final classes can be mocked, go back to mockito-core.
    testImplementation 'org.mockito:mockito-inline:5.2.0'
    testImplementation 'org.robolectric:robolectric:4.10.3'
    testImplementation 'androidx.test:core:1.5.0'
    testImplementation 'androidx.test.ext:junit:1.1.5'
    testImplementation 'androidx.test:rules:1.5.0'
    testImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    testImplementation 'androidx.test.espresso:espresso-intents:3.5.1'
    testImplementation 'androidx.test.espresso:espresso-contrib:3.5.1'
    testImplementation 'androidx.arch.core:core-testing:2.2.0'
    testImplementation 'androidx.room:room-testing:2.5.1'
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.11.0'
    testImplementation 'nl.jqno.equalsverifier:equalsverifier:3.14.2'
    testImplementation 'com.shazam:shazamcrest:0.11'
    testImplementation 'org.skyscreamer:jsonassert:1.5.1'
    testImplementation 'org.jeasy:easy-random-core:5.0.0'
    testImplementation 'org.apache.commons:commons-lang3:3.12.0'
    testImplementation 'commons-validator:commons-validator:1.7'
}


// Disable Google services for open variant.
android.applicationVariants.all { variant ->
    def googleTask = tasks.findByName("process${variant.name.capitalize()}GoogleServices")
    googleTask.enabled = "open" != variant.flavorName
}

/**
 * Loads the default properties, and the user properties. This will also load the
 * secret keys.
 */
def loadProperties() {
    // Load the default properties.
    def defaultProps = new Properties()
    defaultProps.load(file("config.properties").newReader())

    // Load custom properties if available
    def customProps = new Properties(defaultProps)
    def customFile = file("custom-config.properties")
    if (customFile.exists()) {
        customProps.load(customFile.newReader())
    } else {
        logger.info('No custom-config.properties file was found.')
    }

    // Load the secret example secret keys.
    def exampleKeys = new Properties(customProps)
    exampleKeys.load(file('secrets.properties.example').newReader())

    // Load the actual keys if present
    def actualKeys = new Properties(exampleKeys)
    def actualKeyFile = file('secrets.properties')
    if (actualKeyFile.exists()) {
        actualKeys.load(actualKeyFile.newReader())
    } else {
        logger.warn('A secrets.properties file was not found.')
    }

    return actualKeys
}
